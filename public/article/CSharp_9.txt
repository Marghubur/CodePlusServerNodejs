<div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q081. What is the difference between constant and readonly in C#?</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">Both&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">const&nbsp;</b>and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">readonly&nbsp;</b>are used for defining constant in C#, but the purpose of both are different.</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-family: Roboto, sans-serif; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; color: rgb(68, 68, 68); outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Const:</b></div><div style="font-size: medium; color: rgb(68, 68, 68); outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="font-size: medium; color: rgb(46, 46, 46); outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">A const is nothing but a variable of which the value is constant and known at&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">compile time</b>. So we cannot change the value of a const variable throughout the entire program.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">Constant fields are known as&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">compile-time constants</b>. They have a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">local scope</b>.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">It is&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">mandatory to assign a value</b>&nbsp;to the constant variable at the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">time of declaration</b>&nbsp;itself otherwise it will give a compile-time error, that's why it is known as a compile-time constant.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">If you are using an&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">expression&nbsp;</b>for const initialization, the expression must be evaluated at compile time itself otherwise you will get a compile-time error.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">All the constants are&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;"><a href="https://youtu.be/POfQ9IrcEYA" rel="nofollow" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">static&nbsp;</a>implicitly</b>, so we cannot define a constant static explicitly.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">Constants can be marked as&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">public, private, protected, internal, or protected internal</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">&nbsp;access modifiers.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">A const variable cannot be passed as a&nbsp;<a href="https://youtu.be/Mg5_5yIxPdU" rel="nofollow" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);"><b style="outline: 0px; transition: all 0.3s ease 0s;">ref&nbsp;</b>or&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">out&nbsp;</b>parameter</a>.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">A const variable can be referenced through the class name i.e. "ClassName.VariableName" as well because it is static internally.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">Any inbuilt data type can be used for constant declarations. You can also use reference types as well which must be initialized with the null value at the time of declaration.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5; color: rgb(68, 68, 68);">A reference type object (with new keyword initialization) or nullable primitive types cannot be defined as constant.</li></ol></div></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">const UserClass obj1 = null;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(56, 118, 29);">//No Error, since it's evaluated a compile time</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">const UserClass obj2 = new UserClass();&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: red;">//Error : since it's evaluated at run time</span></div></span></div></li></ol><div style="font-size: medium;"><font color="#ff0000"><br></font></div><div style=""><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;">Readonly:</b></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Readonly fields are known as&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">runtime constants</b>. They have&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">global scope</b>&nbsp;i.e read-only fields can only be initialized at the class level.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A readonly field can be initialized only&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">either at the time of declaration</b>&nbsp;itself or&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">within the constructor&nbsp;</b>of the same class. After that, the value for the readonly fields cannot be changed for that instance.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Since a readonly field can be initialized in the constructor, it is also known as&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">run-time constants</b>. So if the readonly field is also initialized at the time of declaration, it will be overridden in the constructor, but after that, it cannot be changed further.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The readonly keyword can be applied to both a value type and reference type i.e a readonly field can be defined for both value type and reference type data.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A readonly field can be declared as&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">static explicitly</b>&nbsp;unlike a const field.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A delegate and event cannot be readonly.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">You cannot create a readonly object or variable using the contextual&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">var&nbsp;</b>keyword. You must have to specify the data type explicitly.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A readonly variable also cannot be passed as<a href="https://youtu.be/Mg5_5yIxPdU" rel="nofollow" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">ref&nbsp;</b>or&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">out&nbsp;</b>parameter</a>&nbsp;like const.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A readonly variable can be referenced through "ClassObject.ReadonlyVariableName".&nbsp;</li></ol><div style="color: rgb(68, 68, 68); font-size: medium;"><br></div><div style=""><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(61, 133, 198); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Const vs Readonly:</b></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ul style="outline: 0px; transition: all 0.3s ease 0s; margin: 0.5em 0px; padding: 0px 2.5em; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">Both const and readonly are used to define the constants in C#.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">Both const and readonly are immutable, meaning the value cannot change throughout the life of the application.&nbsp;</li></ul></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The difference between them lies in when the value of the variable is known throughout the lifecycle of the application. However, there are the following differences between them:</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">For readonly fields, the latest value is known by the runtime while for the const, the value must be known by compile time.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Const are compile-time constants while the readonly fields as run-time constants.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Const has local scope while readonly has global scope.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A const field cannot be specified as static explicitly, but a readonly can be marked as static explicitly.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A const variables can be referenced through "ClassName.VariableName", while readonly can be referenced through "InstanceName.VariableName".&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">For the const keyword, the variable marked as such is placed by the compiler in the assembly metadata that defines the constant and metadata and embeds the value into the IL code after initialization. This means that&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">there is no memory allocation for constants during runtime.</i>&nbsp;On the other hand, under the hood,&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">the readonly value is not a constant; it's stored in the loader heap, which is a memory type that cannot be allocated until the type is loaded</i>. The readonly fields are stored in dynamic memory, the values are accessible only at runtime.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">These two keywords const and readonly use different binary versioning. When an expression references a specific constant, the compiler embeds the value at compile-time. This means if the value is used in a different assembly, the original needs to be updated and the value changed. The changes in the assembly are not reflected until it is recompiled. When an expression references a readonly field, the value is not obtained until runtime. Change in the value is reflected immediately, the assembly does not need to be recompiled.</li></ol><div style="color: rgb(68, 68, 68); font-size: medium;"><br></div><div style=""><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;"><br></span></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q082. What is recursion? Which data structure is used by the recursion?</span></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">In computer science, recursion is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem. A recursive function is a function that calls itself.&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A recursive algorithm is a special type of algorithm in which a method calls itself over and over again to solve a problem. Each successive call reduces the complexity of the problem and moves closer and closer to a solution until finally a solution is reached, the recursion stops, and the method can exit.&nbsp;&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Recursive algorithms are fairly easy to identify because the method name appears in the method body. Recursive algorithms are about breaking complex problems down into smaller more manageable problems.&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style=""><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Every recursive method usually has two basic components:</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">1. Recursion Termination Condition:</b>&nbsp;A Recursive method calls itself until the termination condition is being satisfied.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">2. Recursion Parameter:&nbsp;</b>The Recursive method has a parameter(s) that leads the recursion and calls itself with the new parameter values.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Recursion is a concept in which the method calls itself. Every recursive method needs to be terminated, therefore, we need to write a condition in which we check if the termination condition is satisfied. If we don’t do that, a recursive method will end up calling itself endlessly which causes a stack overflow exception.&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Since the C# compiler does not optimize the tail calls, it causes a StackOverflowException if the termination condition does not define properly.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Any recursive algorithm has two-phase, the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">winding phase</b>&nbsp;and the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">unwinding phase</b>.&nbsp; Winding is simply the work that occurs before a recursive call, and unwinding is the work that occurs after the recursive call.&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">public UInt64 Factorial(int number)</span></div><div style="color: rgb(46, 46, 46); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">{</span></div><div style="color: rgb(46, 46, 46); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">&nbsp; &nbsp;return number == 0 ? 1 : number * Factorial(number - 1);</span></div><div style="color: rgb(46, 46, 46); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">}</span></div><div style="color: rgb(68, 68, 68); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Recursive solution is a powerful and simple approach for complicated developments, but it can worsen performance because of using call stack again and again. The Recursive Methods solve problems and puzzles with brute force. Recursion can be used to implement certain forms of artificial intelligence as well.&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Types of Recursion:&nbsp;</b>The placement of the recursive calls in a recursive algorithm determines the “type” of the recursive algorithm.&nbsp;</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Linear Recursion:</b>&nbsp;Linear recursion is the simplest and most common form of recursion. In linear recursion, the recursive method must call itself, and it can only call itself recursively once per call.&nbsp; For example Factorial(5) -&gt; Factorial(5) -&gt; Factorial(4) -&gt; Factorial(3) -&gt; Factorial(2) -&gt; Factorial(1)</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Tail Recursion:</b>&nbsp;A recursive method is considered to be tail-recursive if nothing has to be done after the recursive call before the method exits. But remember, the physical placement of the recursion termination has nothing to do with it.&nbsp; If the recursion occurs, then the method exits without doing anything else, then it is tail-recursive.&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Middle Recursion:</b>&nbsp;In a middle recursion, there is some code both before and after the recursive call. Hence, the recursion occurs in the middle of the method.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Binary Recursion:&nbsp;</b>In binary recursion, a recursive algorithm calls itself recursively twice per call.&nbsp; It is a bit more complex than linear recursion because it branches out and creates various non-linear paths of execution. A recursive method implementing binary recursion must wait for both recursive calls to finish before it can be complete.</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: large;">&nbsp;&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: large;"><br></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: large;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q083. What is a delegate in C#? Can you tell me some common delegates available in C#?</span></div><div style="color: rgb(68, 68, 68); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A delegate is a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">type-safe function pointer</b>&nbsp;that can<i style="outline: 0px; transition: all 0.3s ease 0s;">&nbsp;reference a method that has the same signature as that of the delegate</i>. A delegate is a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">reference type variable</b>&nbsp;that holds the reference to a method. Delegate is the reference type data type that defines the signature. The delegate type variable can refer to any method with the same signature as the delegate.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A delegate is a type that represents references to methods with a particular parameter list and return type. When you instantiate a delegate, you can associate its instance with any method with a compatible signature and return type. You can invoke (or call) the method through the delegate instance.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Delegates are used to pass methods as arguments to other methods. Event handlers are nothing more than methods that are invoked through delegates. This ability to refer to a method as a parameter makes delegates ideal for defining callback methods.&nbsp;</span></div><div style="color: rgb(68, 68, 68); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">Delegates are specially used for implementing events and call-back methods. All delegates are implicitly derived from the&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148); font-size: medium;">System.Delegate&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">class.</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">public delegate int Calculate(int x, int y);</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">Calculate delegateInstance = new Calculate(CalculateMethod);&nbsp;&nbsp;</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">delegateInstance();</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Any method from any accessible class or struct that matches the delegate type can be assigned to the delegate. The method can be either static or an instance method. The delegate follows the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">variance&nbsp;</b>feature as well. Please read more about&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Covariance vs Contravariance</b>&nbsp;<a href="https://www.techpointfunda.com/2021/10/covariance-vs-contravariance.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here&nbsp;</a>for more details.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><i style="outline: 0px; transition: all 0.3s ease 0s;">In the context of&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;"><a href="https://www.techpointfunda.com/2021/10/static-polymorphism-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">method overloading</a></b>, the signature of a method does not include the return type value. But in the context of&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">delegates</b>, the signature does include the return type value. So a method must have the same return type as the delegate.</i></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">A delegate can be&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Single Cast</b>&nbsp;or&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Multicast</b>. Single cast delegates point to a single method at a time. When a delegate is wrapped with more than one method that is known as a multicast delegate.</div></div></span></div></div><div style="color: rgb(68, 68, 68); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">FUNC, PREDICATE, and ACTION are some common inbuilt delegates in the .Net Framework.&nbsp;</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q084. What is the use of FUNC,&nbsp;PREDICATE, and ACTION&nbsp;delegates in C#?</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">A delegate is a type-safe function pointer that can reference a method that has the same signature as that of the delegate. C# has built-in&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">generic delegate</b>&nbsp;types like Func, PREDICATE, and Action defined in the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">System&nbsp;</b>namespace.</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(61, 133, 198);">FUNC Delegate:</span></b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Func is a generic delegate defined in the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">System&nbsp;</b>namespace.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The Func delegate takes zero, one or more input parameters along with one last&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">OUT parameter</b>&nbsp;that returns a value as an output.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A Func delegate type can include&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">0 to 16</b>&nbsp;input parameters of different types. However, it must include an out parameter for the result.</li></ol></div></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space-collapse: preserve;">public</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space-collapse: preserve;"> </span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space-collapse: preserve;">delegate</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space-collapse: preserve;"> TResult Func&lt;</span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space-collapse: preserve;">in</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space-collapse: preserve;"> T,</span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space-collapse: preserve;">out</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space-collapse: preserve;"> TResult&gt;(T arg);</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space-collapse: preserve;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); white-space-collapse: preserve;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Func Delegate follows the&nbsp;<a href="https://www.techpointfunda.com/2021/10/covariance-vs-contravariance.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">variance&nbsp;</a>feature. It has both&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;"><b style="outline: 0px; transition: all 0.3s ease 0s;">covariant&nbsp;</b>return types and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">contravariant&nbsp;</b>parameter types.</i>&nbsp;</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ul style="outline: 0px; transition: all 0.3s ease 0s; margin: 0.5em 0px; padding: 0px 2.5em; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">Since the input parameter (T) is contravariant, you can use either the type you specified or any type that is less derived.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">Since the output parameter (TResult) is covariant, you can use either the type you specified or any type that is more derived here.</li></ul></div></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><i style="outline: 0px; transition: all 0.3s ease 0s;">We can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate</i>. We can also assign an anonymous method to the Func delegate by using the delegate keyword.</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">Func&lt;</span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">string</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">, </span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">string</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">&gt; convert = </span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">delegate</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">(</span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">string</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> s) { </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">return</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> s.ToUpper();};</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">A Func delegate can also be used with a lambda expression as well.</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">Func&lt;</span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">string</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">, </span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">string</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">&gt; convert = str =&gt; str.ToUpper(); </span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); font-size: 14px; white-space: pre;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(56, 118, 29);">// OR</span></span></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">Func&lt;</span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">string</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">, </span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">string</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">&gt; convert = ()  =&gt; str.ToUpper();</span></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"><br></span></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space-collapse: collapse; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); white-space: pre;"><div style="color: rgb(46, 46, 46); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);"><b style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(61, 133, 198);">PREDICATE Delegate:</span></b></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A Predicate is a delegate like&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Func&nbsp;</b>and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Action&nbsp;</b>delegates which returns a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">boolean&nbsp;</b>true or false as a result.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">It represents a method containing a set of criteria and checks whether the passed parameter meets those criteria.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A predicate delegate method must take one input parameter and return a boolean value.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The Predicate delegate is defined in the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">System&nbsp;</b>namespace as follows. The input parameter (T) is contravariant here as well like Func delegate.</li></ol></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space-collapse: preserve;">public</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space-collapse: preserve;"> </span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space-collapse: preserve;">delegate</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space-collapse: preserve;"> </span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space-collapse: preserve;">bool</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space-collapse: preserve;"> Predicate&lt;</span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space-collapse: preserve;">in</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space-collapse: preserve;"> T&gt;(T obj);</span></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);"><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Same as other delegate types, Predicate can also be used with any method, anonymous method, or lambda expression. But typically, the Predicate&lt;T&gt; delegate is represented by a lambda expression.</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">This delegate is used by several methods of the Array and List&lt;T&gt; classes to search for elements in the collection.&nbsp;</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(61, 133, 198);">ACTION Delegate:</span></b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An Action type delegate is the same as a Func delegate except that the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Action delegate doesn't return a value</b>.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">It is also defined in the System namespace. So an Action delegate can be used with a method that has a void return type.</li></ol></div></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space-collapse: preserve;">public</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space-collapse: preserve;"> </span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space-collapse: preserve;">delegate</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space-collapse: preserve;"> </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space-collapse: preserve;">void</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space-collapse: preserve;"> Action&lt;</span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space-collapse: preserve;">in</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space-collapse: preserve;"> T&gt;(T obj);</span></div></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The input parameter is contravariant for the Action Delegate as well. An Action delegate can take up to 16 input parameters of different types.</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">An Anonymous method can also be assigned to an Action delegate. A Lambda expression also can be used with an Action delegate.</div><div style="color: rgb(68, 68, 68); font-size: medium;"><br></div><div style="color: rgb(68, 68, 68); font-size: medium;"><br></div><div style=""><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q085. What are the generics in C#, and why they are required? How can you define a generic class and methods in C#?</span></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">In C# generic means a general form, not specific; means not specific to a particular data type.&nbsp; Generics are the most powerful feature of C#.&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">Generics allow you to define&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">type-safe</b>&nbsp;data structures, without committing to actual data types.&nbsp;</i>Generics are generally used to create generic collections in C#. In C# Generics are introduced as part of&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">C# 2.0</b></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Generics introduces the concept of&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">type parameters&nbsp;</b>to .NET, which makes it possible to design classes and methods that defer the specification of one or more types until the class or method is declared and instantiated by client code.</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><i style="outline: 0px; transition: all 0.3s ease 0s;">Generics are used to&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">decouple the data type</b>&nbsp;from method, class, or interface.</i>&nbsp;Generic is a concept that allows us to define classes and methods with a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">placeholder</b>. C# compiler replaces these placeholders with the specified type at&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">compile time</b>. Generics in C# allow us to define classes and methods which are decoupled from the data type.&nbsp;</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">C# allows you to define generic classes, interfaces, abstract classes, fields, methods, static methods, properties, events, delegates, and operators using the type parameter and without the specific data type. Generic classes and methods combine&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">reusability</b>,&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">type safety</b>, and efficiency in a way that their non-generic counterparts cannot.</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">A generic type is declared by specifying a type parameter in&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">angle brackets</b>&nbsp;after a type name, e.g. TypeName&lt;T&gt; where T is a type parameter. It is not required to use T as a type parameter. You can give any name to a type parameter. Generally, T is used when there is only one type parameter.&nbsp;</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">A type parameter is a placeholder for a particular type specified when creating an instance of the generic type. We can also define multiple type parameters separated by a comma.</div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(46, 46, 46); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">The&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">System.Collections.Generic</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">&nbsp;namespace contains several generic-based collection classes.&nbsp; Information on the types that are used in a generic data type may be obtained at run-time by using&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">reflection</b>.</span></div><div style="color: rgb(46, 46, 46); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(61, 133, 198);">Advantage of Generics:</span></b></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Generics allows us to define classes and methods which are&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">decoupled&nbsp;</b>from the data type, so it increases the reusability of the code.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Generics are&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">type-safe</b>. You get compile-time errors if you try to use a different data type than the one specified in the definition.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Generic has a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">performance&nbsp;</b>advantage because it removes the possibilities of&nbsp;<a href="https://youtu.be/lruQ-1X4JWk" rel="nofollow" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">boxing and unboxing</a>.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Generics have removed the limitation of&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">ArrayList&nbsp;</b>defined the&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">System.Collections</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">&nbsp;namespace by introducing generic collections in System.Collections.Generic namespace.</span></li></ol></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(61, 133, 198);">Generic Class:</span></b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Generic classes are defined using a type parameter in angle brackets after the class name.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A generic class can be a base class for other generic or non-generic classes or abstract classes.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A generic class can be derived from other generic or non-generic interfaces, classes, or abstract classes.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A generic class increases the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">reusability</b>. However, too much generalization makes code difficult to understand and maintain.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">You can create an instance of generic classes by specifying an actual type in angle brackets.</li></ol></div></div></div></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(11, 83, 148); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">public class GenericList&lt;T&gt;</div><div style="color: rgb(11, 83, 148); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">{</div><div style="color: rgb(11, 83, 148); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">&nbsp; &nbsp; public void Add(T input) { }</div><div style="color: rgb(11, 83, 148); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">}</div><div style="color: rgb(11, 83, 148); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Generic Method:</b></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The generic parameter type can be used with multiple parameters with or without non-generic parameters and return type.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A non-generic class can include generic methods by specifying a type parameter in angle brackets with the method name.</li></ol></div><div style="color: rgb(68, 68, 68); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">public void Message&lt;T&gt;(T msg)</span></div><div style="color: rgb(46, 46, 46); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">{</span></div><div style="color: rgb(46, 46, 46); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; white-space: pre;">	</span>Console.WriteLine(msg);</span></div><div style="color: rgb(46, 46, 46); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">}</span></div><div style="color: rgb(46, 46, 46); font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q086. What is the difference between System.Collections and System.Collections.Generic namespaces?</span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">C# includes specialized classes that store series of values or objects called&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">collections</b>. There are two types of collections in C#:&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Non-Generic</b>&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">collections&nbsp;</b>and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Generic collections</b>.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">The&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">System.Collections</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">&nbsp;namespace contains the non-generic collection types and&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">System.Collections.Generic</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">&nbsp;namespace includes generic collection types.&nbsp;</span></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">System.Collections namespace contains interfaces and classes that define various collections of objects, such as&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">ArrayList</b>,&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Hashtable</b>,&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Queue</b>,&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Stack</b>,&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">SortedList</b>, ICollection, IDictionary, IEnumerable, IEnumerator, IList, IEqualityComparer, etc.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">System.Collections.Generic namespace contains interfaces and classes that define generic collections, which allow users to create&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">strongly typed collections</b>&nbsp;that provide&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">better type safety and performance</b>&nbsp;than non-generic strongly typed collections.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">System.Collections.Generic&nbsp; contains: Comparer&lt;T&gt;, Dictionary&lt;TKey,TValue&gt;, HashSet&lt;T&gt;, LinkedList&lt;T&gt;, List&lt;T&gt;, Queue&lt;T&gt;, Stack&lt;T&gt;, SortedList&lt;TKey,TValue&gt;, SortedDictionary&lt;TKey,TValue&gt;, ICollection&lt;T&gt;, IEnumerable&lt;T&gt;, IEnumerator&lt;T&gt;, IList&lt;T&gt;, IReadOnlySet&lt;T&gt; etc.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Generic collections are always recommended because they perform faster than non-generic collections and also minimize exceptions by giving compile-time errors.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q087. What is the difference between an Array and ArrayList in C#?</span></div><div style="color: rgb(68, 68, 68); font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">An&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Array&nbsp;</b>is a fixed-length&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">sequential collection</b>&nbsp;of similar data types items (homogeneous collections) that can be accessed as per the “index”. It is the simplest type of data structure in which the elements get stored in a contiguous memory location.&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">In an array, the index starts with&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">zero</b>.</i></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">The&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">ArrayList&nbsp;</b>is a collection of objects of the same or different data types.&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">The size of an ArrayList can be dynamically increased or decreased as per the requirement.</i>&nbsp;It works like an array but unlike an array in ArrayList, items can be dynamically allocated or deallocated.</span></div><div style="color: rgb(68, 68, 68); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(61, 133, 198); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Array vs ArrayList:</b></span></div><div style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="color: rgb(46, 46, 46); font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">An Array is defined in the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">System&nbsp;</b>namespace while ArrayList is defined in&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">System.Collection</b>&nbsp;namespace.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">An Array is&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">strongly-typed</b>&nbsp;so we can store only the same type of data. While ArrayList is a<b style="outline: 0px; transition: all 0.3s ease 0s;">&nbsp;non-generic collection type&nbsp;</b>and we can store any type of data in ArrayList.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">We do not need to cast elements of an array while retrieving because it is strongly typed and stores a specific type of item only. On the other hand, the items of ArrayList need to be cast to an appropriate data type while retrieving.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">An array can store a fixed number of elements but ArrayList is dynamic in terms of capacity hence it is variable in size.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">An Array cannot accept a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">null value</b>&nbsp;while ArrayList can contain a null value because internally it uses&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Object&nbsp;</b>as the data type.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">Array provides better performance than ArrayList because the array does not cause&nbsp;<a href="https://youtu.be/lruQ-1X4JWk" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">boxing and unboxing</a>&nbsp;while ArrayList performs boxing and unboxing.</span></li></ol><div style=""><font color="#444444" size="3"><br></font></div><div style=""><font color="#444444" size="3"><br></font></div><div style=""><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q088. What’s the difference between the Array.CopyTo and Array.Clone?</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">An array in C# is a collection of similar data items accessed using a numeral index. But remember that the array always starts with index 0, not from 1. In our daily task on array there may be situations where we want to work with a new array but copy items from an existing array to it, or copy items from one array into another array.&nbsp;</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">For that array provides multiple ways i.e&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">CopyTo</b>,&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">ConstrainedCopy</b>, and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Clone</b>. But all do a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">shallow copy</b>&nbsp;not a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">deep copy</b>.&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">Shallow copying is creating a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">new object</b>&nbsp;and then copying the non-static fields of the current object to the new object. If the field is a value type, a bit-by-bit copy of the field is performed. A shallow copy of an object is a new object whose instance variables are identical to the old object.</i></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><i style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">The&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">Clone()&nbsp;</b>method returns a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">new array</b>&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">object&nbsp;</b>(a shallow copy) containing all the elements in the original array. While the CopyTo() method copies the elements into another existing array. But both perform a shallow copy only.</span></i></div><div><i style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br></span></i></div><div><i style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-style: normal; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;">Array.CopyTo:</b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-style: normal; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-style: normal;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5; color: rgb(68, 68, 68);"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The ArrayCopy() is a static helper method. It copies elements from one array to another.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The destination array has to be already created with the right dimension.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The Array.CopyTo copies all the elements of the current array to the specified destination array.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><i style="outline: 0px; transition: all 0.3s ease 0s;">This CopyTo method should be called from the source array and it takes two parameters. The first is the array you want to copy to, and the second parameter tells it what index of the destination array it should start copying into.&nbsp;</i></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Array.ConstrainedCopy is similar to Array.CopyTo. The only difference is that Array.ConstrainedCopy guarantees that all changes are undone if the copy operation does not succeed completely because of some exceptions.</li></ol><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">var source = new[] { 1, 8, 9 };</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">var target = new string[4];</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">source.CopyTo(target, 1);</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Array.Clone:</b></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">This method also performs a shallow copy of the array elements. The Clone() method implements the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">ICloneable&nbsp;</b>interface.&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">It creates a new instance of the array holding the same elements but returns the object you have to cast.</i></span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The Array.Clone() method returns a new array object containing all the elements in the original array.&nbsp;</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">This method creates a copy of an array as an object, therefore needs to be cast to the actual array type before it can be used to do very much. The clone is of the same type as the original array.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">If the array contains reference types data, only those references are copied, but the actual objects that the references refer to are not.&nbsp;</span></li></ol></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">int[] numberArray = {10,15,18,38,23};</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">int[] clonedNumberArray = (int[])numberArray .Clone();</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(61, 133, 198);">Note:</span></b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><i style="outline: 0px; transition: all 0.3s ease 0s;">If the elements of the array are of&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">reference types</b>, then both Clone and CopyTo will be made up to the first (top) level only (i.e shallow copy) i.e the reference is copied but the referred object is not. But the lower-level items don't get copied. A shallow copy of an object is a new object whose instance variables are identical to the old object.</i></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><i style="outline: 0px; transition: all 0.3s ease 0s;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></i></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><i style="outline: 0px; transition: all 0.3s ease 0s;">If we need a copy of the lower level also, we have to do it explicitly.&nbsp; That's why after the Cloning or Copying of reference type elements, each element in the Cloned or Copied array refers to the same memory location as referred by the corresponding element in the original array. So no separate instance is created for the lower level.&nbsp;</i></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q089. What is an indexer in C#? What is the difference between indexer and property?</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Indexers allow instances of a class or struct to be indexed just like arrays.&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">A C# indexer is a class property that allows you to access a member variable of a class or struct using the features of an array.</i>&nbsp;An Indexer is the same as a property that has a parameter so you can think of an indexer as parameterized property.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The indexed value can be set or retrieved without explicitly specifying a type or instance member. Indexers resemble properties except that their accessors take parameters.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers enable objects to be indexed in a similar manner to arrays.&nbsp;<i style="outline: 0px; transition: all 0.3s ease 0s;">Indexers are always used on collections or groups of elements.</i></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">There should be at least one parameter specified in the indexer.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A get accessor returns a value while a set accessor assigns a value and both use the [ ] operator to get and set the value.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The "<b style="outline: 0px; transition: all 0.3s ease 0s;">value</b>" keyword is used to define the value being assigned by the set accessor.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Both&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;"><a href="https://www.techpointfunda.com/2021/01/Structure-Or-Struct-CSharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">structures&nbsp;</a></b>and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">classes&nbsp;</b>can define indexers. But&nbsp;<a href="https://www.techpointfunda.com/2020/09/static-class-constructor-method-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">Static class</a>&nbsp;can not define an indexer.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A "<b style="outline: 0px; transition: all 0.3s ease 0s;">this</b>" keyword is used to define the indexer.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A static class cannot have an indexer because the "this" keyword is not supported in static classes.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Since the indexer is an instance member it cannot be static.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">REF&nbsp;</b>and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">OUT&nbsp;</b>parameter modifiers are not permitted in the indexer.&nbsp;Please watch the REF vs OUT video&nbsp;<a href="https://youtu.be/Mg5_5yIxPdU" rel="nofollow" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here&nbsp;</a>for more details.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers do not have to be indexed by an integer value; it is up to you how to define the specific look-up mechanism.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers can also be overloaded same as methods, constructors, and operators.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers can have more than one formal parameter, for example, when accessing a two-dimensional array.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexer is identified by its signature that's why indexers are accessed using indexes.</li></ol><div><br></div><div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">It is common for an indexer's get or set accessor to consist of a single statement that either returns or sets a value.&nbsp;</div></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">class</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> </span><span class="hljs-title" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(0, 104, 129); white-space: pre;">UserCollection</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">&lt;</span><span class="hljs-title" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(0, 104, 129); white-space: pre;">T</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">&gt;
{
   </span><span class="hljs-comment" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: green; white-space: pre;">// Declare an array to store the data elements.</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">
   </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">private</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> T[] arr = </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">new</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> T[</span><span class="hljs-number" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(23, 23, 23); white-space: pre;">100</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">];

   </span><span class="hljs-comment" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: green; white-space: pre;">// Define the indexer to allow client code to use [] notation.</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">
   </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">public</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> T </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">this</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">[</span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">int</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> i]
   {
      </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">get</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> { </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">return</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> arr[i]; }
      </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">set</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"> { arr[i] = </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); white-space: pre;">value</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;">; }
   }
}</span></div></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); white-space: pre;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium; white-space: normal; background-color: rgb(255, 255, 255);">Starting with&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">C# 6</b>, a&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">read-only indexer</b>&nbsp;can be implemented as an expression-bodied member. Note that =&gt; introduces the expression body and that the get keyword is not used.&nbsp;</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium; white-space: normal; background-color: rgb(255, 255, 255);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium; white-space: normal; background-color: rgb(255, 255, 255);">Starting with C# 7.0, both the get and set accessor can be implemented as expression-bodied members. In this case, both get and set keywords must be used.&nbsp;</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium; white-space: normal; background-color: rgb(255, 255, 255);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium; white-space: normal; background-color: rgb(255, 255, 255);"><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">class</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"> </span><span class="hljs-title" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(0, 104, 129); font-size: 14px; white-space: pre;">UserCollection</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">&lt;</span><span class="hljs-title" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(0, 104, 129); font-size: 14px; white-space: pre;">T</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">&gt;
{
   </span><span class="hljs-comment" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: green; font-size: 14px; white-space: pre;">// Declare an array to store the data elements.</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">
   </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">private</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"> T[] arr = </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">new</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"> T[</span><span class="hljs-number" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">100</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">];

   </span><span class="hljs-comment" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: green; font-size: 14px; white-space: pre;">// Define the indexer to allow client code to use [] notation.</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">
   </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">public</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"> T </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">this</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">[</span><span class="hljs-built_in" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">int</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"> i]
   {
      </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">get</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"> =&gt; arr[i];
      </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">set</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"> =&gt; arr[i] = </span><span class="hljs-keyword" face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline-color: inherit; outline-style: initial; outline-width: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); box-sizing: inherit; color: rgb(1, 1, 253); font-size: 14px; white-space: pre;">value</span><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;">;
   }
}</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium; white-space: normal; background-color: rgb(255, 255, 255);"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium; white-space: normal; background-color: rgb(255, 255, 255);"><span face="SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; background-color: rgb(242, 242, 242); color: rgb(23, 23, 23); font-size: 14px; white-space: pre;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Indexer vs Property:</b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers are created with&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">this&nbsp;</b>keyword while properties do not require "this" keyword.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexer always requires a parameter for accessing(both get and set) while property does not require any parameter.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers are instance members so they cannot be static but properties can be static.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A static class cannot have an indexer but properties can be defined in a static class.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers are identified by their signatures while properties are identified by their names.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers are accessed using indexes while properties are accessed by their names.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Indexers can be overloaded but property cannot be overloaded.&nbsp;Please read the overloading article&nbsp;<a href="https://www.techpointfunda.com/2021/10/static-polymorphism-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here&nbsp;</a>for more details.&nbsp;</li></ol><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s; color: rgb(68, 68, 68); font-size: medium; white-space: normal; background-color: rgb(255, 255, 255);"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q090. What is the difference between debug and release mode?</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Visual Studio projects have separate&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">release&nbsp;</b>and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">debug&nbsp;</b>configurations for your project. You can build the debug version for debugging and the release version for the final release distribution. You can change the build configuration from the Build menu, from the toolbar, or from the project's property pages.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">&nbsp;</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">In debug configuration, your program compiles with&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">full symbolic debug information&nbsp;</b>and&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">no optimization</b>. Optimization complicates debugging because the relationship between source code and generated instructions is more complex. The release configuration of your program has no symbolic debug information and is fully optimized.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">&nbsp;</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">For managed code and C++ code, debug information is generated in&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">.pdb files</b>, depending on the compiler options that are used. Creating<b style="outline: 0px; transition: all 0.3s ease 0s;">&nbsp;.pdb</b>&nbsp;files can be useful if you later have to debug your release version.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">There is no difference in the functionality of a debug DLL and a release DLL. usually, when we compile code in debug mode, we have a corresponding .pdb (program database) file. This .pdb file contains information that enables the debugger to map the generated IL (intermediate language) to the source code line number. It also contains the names of local variables in the source code.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The compiler emits an instance of the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">System.Diagnostics.DebuggableAttribute</b>. In the debug version, the&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">IsJitOptimizerEnabled&nbsp;</b>property is True, in the release version it is False.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">You can see this attribute in the assembly manifest with&nbsp;<b style="outline: 0px; transition: all 0.3s ease 0s;">ildasm.exe</b>. The JIT compiler uses this attribute to disable optimizations that would make debugging difficult. The ones that move code around like loop-invariant hoisting. In selected cases, this can make a big difference in performance. Not usually though.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Debug mode is used when we are developing the application and release mode is used when we are going to production or deploying the application to the server.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The debug mode code is not optimized while the release mode code is optimized.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">In debug mode, the application performance will be slightly slow while in release mode the application will be faster.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">In the debug mode the debug symbols (#IF DEBUG or [Conditional("DEBUG")]) will be executed which are ignored in the release mode.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The debug mode dll and exe generate complete exception stack trace information while the release build does not.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div></span></div></div></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px; text-align: right;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s; color: red; font-size: x-large;">To Be Continued Part-10...</b></span></div></div></div></span></div></div></div></span></div></span></div></div></span></div></div></div></span></div></span></div></span></div></div></div></span></i></div></span></div></div></div></span></div></div></span></div></span></div></span></div></span></div></div></span></div></div></span></div></div></span></div></div></span></div></div></span></div></div></div></span></span></div></span></div></span></div></span></div></div></span></div></div></span></div></div></div></span></div></span></div></span></div></div></div></div></span></div></div></div></div></div></span></div>
<h3><span style="font-weight: normal;"><a name="X2f2986937fa978dc97f8d51fc90a6f6af85b6d1"></a><a name="post-body-3132395124980204577"></a><a name="Xb74a1fe1fd276c66bde63333c72e057162d5d1d"></a><a name="Blog1"></a><a name="sunday-august-7-2022"></a><a name="content-wrapper"></a><a name="main-wrapper"></a><a name="main"></a><a name="outer-wrapper"><span lang="EN-US">C# Interview
Questions and Answers - Part 12<o:p></o:p></span></a></span></h3><h3>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q121. What is the
difference between final, finally, and finalize?<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">The basic difference
between final, finally, and finalize is that the final is an access modifier
used for restriction, finally is a code block to execute a set of
statements whether an exception is triggered or not, and finalize is the method
of the object class to release the unmanaged resource.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Final:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Java</span><span lang="EN-US"> has the final keyword but C# does not have any final
keyword.&nbsp;However, for the sealed method, the compiler uses the final
modifier internally. Please see the IL code generated by the compiler </span><a href="https://www.techpointfunda.com/2020/10/sealed-class-sealed-methods-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US"> for a C# sealed
method.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">C# use the sealed
keyword for the same purpose. But&nbsp;unlike Java, a sealed keyword can only
be applied to method and class, not on property or variable. In Java, the final
keyword can be used for class, method, property, and variables as well.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">The&nbsp;Final or
sealed modifier is used to apply restrictions on a class or method. The final
class or sealed can't be inherited, a final method (sealed) can't be overridden
further and the final variable value can't be changed.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Please read the
sealed class and sealed method article </span><a href="https://www.techpointfunda.com/2020/10/sealed-class-sealed-methods-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US"> for more detail.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Finally:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Finally is a code
block that is used after the try-catch block or after the try
block.&nbsp;&nbsp;The final block is used to execute a given set of statements,
whether an exception is thrown or not thrown.&nbsp;<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">The finally block
generally contains the logic to release the resource. The Iterator pattern and
using dispose pattern always use the try-finally exception handling pattern.
Please watch the try-finally video </span><a href="https://youtu.be/ZntIkvmEqa8"><span lang="EN-US">here</span></a><span lang="EN-US"> for more detail.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Finalizer:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Finalize is a method
of Object class.&nbsp;The Finalize in C# is used to free unmanaged resources
like database connections etc. The finalize method is used to perform clean-up
processing just before the object is garbage collected.&nbsp;<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">It is invoked by the
GC just before an object is discarded by the garbage collector. Please
read the Finalizer article </span><a href="https://www.techpointfunda.com/2021/01/destructor-and-finalizer-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US"> for more detail.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q122. What is the
difference between First() and FirstOrDefualt() in C#?<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Both&nbsp;First()
and FirstOrDefualt() are used to get the first record of the object collection.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">The major difference
between First and FirstOrDefault is that First() will throw an exception if
there is no result data for the supplied criteria whereas FirstOrDefault() will
return the default value (null) if there is no result data.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">So the&nbsp;First()
method will throw System.InvalidOperationException exception if there is no
result data but FirstOrDefault() returns the default value i.e null if there is
no result data.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q123. What is the
volatile keyword? What is the use of volatile keywords in C#?<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">The volatile
keyword indicates that a field might be modified by multiple threads that are
executing at the same time. So the volatile keyword is used to tell the
compiler not to use any optimization on the volatile marked variables.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">JIT</span><span lang="EN-US"> compiler always does some optimization strategy while compiling the
code. The optimization techniques used by the JIT might lead to unpredictable
results when your .Net program is trying to perform non-volatile reads of data
in a multithreaded scenario.&nbsp;<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">However, in C# all
memory writes are volatile irrespective of whether you are writing data to a
volatile or a non-volatile object. But the ambiguity happens when you
are reading data.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">When you are reading
data that is non-volatile, the executing thread may or may not always get the
latest value.&nbsp; If the object is volatile, the thread always gets the most
up-to-date value<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">The volatile keyword
in C# is used to inform the JIT compiler that the value of the variable should
never be cached because it might be changed by the operating system, the
hardware, or a concurrently executing thread. So the compiler avoids using any
optimizations on the variable that might lead to data conflicts, i.e. to
different threads accessing different values of the variable.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">While using the
volatile keyword, you must have to follow some rules:<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">You can use the volatile
keyword with any reference, pointer, and enum types.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">When you specify a reference
type object as volatile, only the pointer address is volatile, not the value of
the instance.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">You can also use the volatile
modifier with byte, short, int, char, float, and bool types.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">4.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">But a local instance variable
cannot be declared as volatile.&nbsp;<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">5.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Also, a double variable cannot
be volatile because it is 64 bits in size, larger than the word size on x86
systems. If you need to make a double variable volatile, you should wrap it
inside in class.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Please watch the
volatile video </span><a href="https://youtu.be/ei3uEG4OpNQ"><span lang="EN-US">here</span></a><span lang="EN-US"> for more details.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q124. What is the
difference between Deferred Execution vs Immediate Execution? or&nbsp;What is
the difference between Lazy Operators vs Greedy Operators?<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">LINQ provides two
different behaviors of Query Execution i.e. Deferred Execution and Immediate
Execution. <i>By default, LINQ uses deferred execution</i>. So&nbsp;LINQ query
is not executed when constructed but when enumerated.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">When we write a LINQ
query, it doesn’t execute by itself. It executes only when we access the query
results means the execution of the query is deferred until the query variable
is iterated over in a loop.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">There are two types
of query executions in LINQ:<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Immediate
Execution:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo2"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">In Immediate Execution Query is
executed at the point of its declaration.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo2"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Greedy Operators are used for
Immediate Execution.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo2"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">For example Aggregate Functions
(Count, Average, Min, Max, Sum) and Element Operators (First, Last,
FirstOrDefault, LastOrDefault, Single, ToList, ToArray, ToDictionary, etc) are
used for Immediate Execution.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Deferred
Execution:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo3"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Deferred execution means that
the evaluation of an expression is delayed until its realized value is actually
required. So a Deferred Execution doesn’t compute the result until the caller
actually uses it.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo3"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">In Deferred Execution Query is
not executed at the point of its declaration.&nbsp;<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo3"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Lazy Operators are used for
deferred execution.&nbsp;For example Projection Operator (Select,
SelectMany) and Restriction Operator ( Where, Paging Operator like Take,
Skip) are the Lazy Operators.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo3"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">4.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Deferred execution&nbsp;greatly
improves performance by avoiding unnecessary execution.&nbsp; It&nbsp;is
applicable on any in-memory collection as well as remote LINQ providers.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo3"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">5.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Deferred execution re-evaluates
each execution i.e is called lazy evaluation. So&nbsp;it always gives you the
latest data.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo3"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">6.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Deferred execution is supported
directly in the C# language by the yield keyword when used within an iterator
block. So you can implement deferred execution for your custom extension
methods for IEnumerable using the yield keyword of C#. Please read more about
the yield statement </span><a href="https://youtu.be/wBSyTu9VeqQ"><span lang="EN-US">here</span></a><span lang="EN-US">.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">The LINQ
technologies make extensive use of deferred execution in both the members of
the core System.Linq classes and in the extension methods in the various
LINQ namespaces, such as System.Xml.Linq.Extensions.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q125.&nbsp;What is
the difference between Lazy Loading vs Early Loading in C#?&nbsp;<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Eager&nbsp;Evaluation&nbsp;vs
Lazy Evaluation OR&nbsp;Lazy Loading vs Eager Loading:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">When you write a
method that implements deferred execution, you also have to decide whether to
implement the method using lazy evaluation or eager evaluation. Lazy Loading
and Explicit Loading both are types of deferred execution.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Lazy Loading</span><span lang="EN-US"> says that “don’t do the work until you absolutely have to.” So in
Lazy Loading, a query is not executed, until it is requested.&nbsp;&nbsp;In
Entity Framework, you can turn off the lazy loading feature by setting the
LazyLoadingEnabled property of the ContextOptions on context to false.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">context.ContextOptions.LazyLoadingEnabled
= false;<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Eager Loading</span><span lang="EN-US"> says that “do all the work in advance”. So in Eager Loading, the
LINQ query is executed when any Conversion operator like ToArray(), ToList(),
ToDictionary(), ToLookup() is called.&nbsp;In LINQ to an Entity, we can also
use the Include() method to make Eager Loading.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">context.Contacts.Include("User.UserRole");<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Explicit Loading</span><span lang="EN-US"> says that “do all the work even with lazy loading
disabled”.&nbsp;&nbsp;So even with lazy loading disabled, it is still possible
to lazily load related entities. For that, we have to make an explicit call to
the Load() method.&nbsp;<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">context.Entry(post).Reference(p
=&gt; p.UserList).Load();<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">In Lazy
Evaluation, every element of the source collection is processed during each
call to the iterator.&nbsp;Lazy evaluation usually gives better performance
because it distributes overhead processing evenly throughout the evaluation of
the collection and minimizes the use of temporary data.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">On the other hand in
Eager Evaluation, the first call to the iterator will result in the
entire collection being processed.&nbsp;&nbsp;Due to this a temporary copy of
the source collection might also be required for example the OrderBy clause.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Advantage of
Deferred Execution:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo4"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Deferred Execution&nbsp;avoids
unnecessary query execution and hence improves performance.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo4"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Query construction and Query
execution are decoupled, so we can create the LINQ query in several steps.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo4"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Deferred Execution prevents
loading all the data from remote to in memory, so it enhances the performance
of the application.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo4"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">4.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">A deferred execution query is
always reevaluated when you re-enumerate so we always get the latest data.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q126. What is the
difference between&nbsp;Late Binding and Lazy Loading? Are both the same?&nbsp;<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Lazy Loading vs
Late Binding:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Lazy Loading is the
query execution concept where&nbsp;a query is not executed until it is
requested.&nbsp;Projection Operator (Select, SelectMany) and Restriction
Operator ( Where, Paging Operator like Take, Skip) are the Lazy Operators
which are used in Lazy Loading.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">On the other hand, </span><a href="https://www.techpointfunda.com/2020/11/virtual-method-and-method-override-csharp.html"><span lang="EN-US">Late Binding</span></a><span lang="EN-US"> is the concept of
binding a method to the object at run-time. It can be achieved by </span><a href="https://www.techpointfunda.com/2020/11/virtual-method-and-method-override-csharp.html"><span lang="EN-US">method overriding</span></a><span lang="EN-US">.&nbsp;<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">So Lazy Loading and
Late Binding both are not the same.&nbsp;Please read more about the late
binding </span><a href="https://www.techpointfunda.com/2020/11/virtual-method-and-method-override-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US"> for more details.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q127. What is the
difference between&nbsp;Early Binding and Early Loading? Are both the same?<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Eager Loading vs
Early Binding:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Eager Loading is the
query execution concept where a query is executed immediately where it is
declared. Greedy Operators like&nbsp;Aggregate Functions (Count,
Average, Min, Max, Sum) and Element Operators (First, Last,
FirstOrDefault, LastOrDefault, Single, ToList, ToArray, ToDictionary, etc) are
used for Eager Loading.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">On the other hand, </span><a href="https://www.techpointfunda.com/2021/10/static-polymorphism-csharp.html"><span lang="EN-US">Early Binding</span></a><span lang="EN-US"> is the concept of
binding a method to the object at compile time. It can be achieved by </span><a href="https://www.techpointfunda.com/2021/10/static-polymorphism-csharp.html"><span lang="EN-US">method overloading</span></a><span lang="EN-US">.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">So Eager Loading and
Early Binding are not the same. Please read more about the late binding&nbsp;</span><a href="https://www.techpointfunda.com/2021/10/static-polymorphism-csharp.html"><span lang="EN-US">here&nbsp;</span></a><span lang="EN-US">for more details.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q128. What is the
difference between "this" vs "base" keyword in C#?<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Both this and base
are used to refer to the context of a class member i.e current or base class.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">The
"base" Keyword:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo5"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The "base" keyword is
used to access the base class members from a derived class.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo5"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The "base" keyword
can be used to call a base class method that has been overridden in the derived
class. Please read more </span><a href="https://www.techpointfunda.com/2020/11/virtual-method-and-method-override-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US">.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo5"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The"base" keyword is
used to call the base class constructor or you can say to pass the parameters
to the base class constructors. Please read more </span><a href="https://www.techpointfunda.com/2020/12/constructors-in-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US">.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo5"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">4.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The "base" keyword
cannot be used in a static class or for a static member. Please read more </span><a href="https://www.techpointfunda.com/2020/09/static-class-constructor-method-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US">.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">The
"this" Keyword:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo6"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">A "this" keyword
refers to the current instance of the class. So it is generally ignored as it
is implicitly there.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo6"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">It is also used to
differentiate between the method's formal parameters and class fields if they
both have the same name.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo6"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">A&nbsp;&nbsp;“this” keyword is
also used to call another constructor from a constructor in the same class.
This is known as constructor chaining. Please read more </span><a href="https://www.techpointfunda.com/2020/12/constructors-in-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US">.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo6"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">4.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">A "this" keyword is
also used to define the first binding parameter in the extension method. Please
read more </span><a href="https://youtu.be/a8ktptocttQ"><span lang="EN-US">here</span></a><span lang="EN-US">.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo6"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">5.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">A "this" keyword is
used to define the indexers. Please read more </span><a href="https://www.techpointfunda.com/2021/10/static-polymorphism-csharp.html"><span lang="EN-US">here</span></a><span lang="EN-US">.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q129. What is the
difference between foreach loop and for loop in C#?<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">In C# for loop is
used to perform any repetitive task for "n" number of times. Here we
can specify the initial value and increment or decrement operation on each
iteration explicitly. We can also specify multiple multiple loop variables to
control the iterations.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">On the other hand,
foreach loop is also used for doing any task n number of times but it does not
provide any control variable explicitly. The loop control value is decided
automatically depending on the total collection of arrays or list generic or
ArrayList or object collections.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">For Statement:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo7"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The for statement executes a
statement or a block of statements while a specified Boolean expression
evaluates to true.&nbsp;<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo7"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The for loop has three
sections, the initialization section, condition section, and iterator section.
However, all the sections of the for statement are optional.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo7"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">A for statement uses the loop
initialization variables and loop termination logic explicitly. However, if you
don't declare a loop variable in the initializer section, you can use zero or
more of the expressions from the preceding list in the initializer section as
well.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo7"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">4.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The initializer section is
executed only once, before entering the loop.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo7"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">5.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">A condition section is a
boolean expression that determines whether the next iteration in the loop
should be executed or not. It can contain zero or more expressions separated by
commas.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo7"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">6.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The iterator section defines
what happens after each execution of the body of the loop.&nbsp;The iterator
section contains increment or decrement on the counter.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo7"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">7.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">At last, the body of the loop
must be a single statement or a block of statements.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Foreach
Statement:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo8"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The foreach statement executes
a statement or a block of statements for each element in an instance of the
type that implements the System.Collections.IEnumerable or
System.Collections.Generic.IEnumerable&lt;T&gt; interface.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo8"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">If the foreach statement is
applied to null, a NullReferenceException is thrown.&nbsp;<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo8"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">If the source collection of the
foreach statement is empty, the body of the foreach statement isn't executed
and skipped.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo8"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">4.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Beginning with C# 8.0, you can
use the await foreach statement to consume an asynchronous stream of data, that
is, the collection type that implements the IAsyncEnumerable&lt;T&gt;
interface.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo8"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">5.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">You can use the var keyword to
let the compiler infer the type of an iteration variable in the foreach
statement. However, you can also explicitly specify the type of iteration
variable.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">For Loop vs
ForEach Loop:</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo9"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">1.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">The foreach statement
enumerates the elements of a collection and executes its body for each element
of the collection. On the other hand a for statement executes its body while a
specified Boolean expression evaluates to true.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo9"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">2.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">In for loop, we iterate the
collection in both forward and backward directions, But in the foreach loop, we
can iterate a collection only in the forward direction, not in a backward
direction.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo9"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">3.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">In terms of a variable declaration,
foreach loop has five variable declarations whereas for loop only have three
variable declarations.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo9"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">4.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">A foreach loop also creates a
copy of a collection temporarily&nbsp;whereas the for loop doesn’t do.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo9"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">5.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Foreach loops do not keep track
of the index. So we cannot obtain array index in the ForEach loop but we can do
that in the for loop.<o:p></o:p></span></span></p>

<p class="Compact" style="margin-left:36.0pt;text-indent:-24.0pt;mso-list:l0 level1 lfo9"><!--[if !supportLists]--><span style="font-weight: normal;"><span lang="EN-US">6.<span style="font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 7pt; line-height: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]--><span lang="EN-US">Foreach loop is always forward
readonly so they are not appropriate when you want to modify the collection but
a for loop can be used in this scenario.<o:p></o:p></span></span></p>

<p class="FirstParagraph"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Q130. What is the
difference between instance field and property in the C# class?<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">You can store value
using either a field or a property and retrieve the value back from them. You
can even protect both fields and properties using access modifiers such as
private or protected. Both can be defined in class and structure.&nbsp;<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">The main difference
between a field and a property is that a field is a variable of any type that
is declared directly in the class while a property is a member that provides a
flexible mechanism to read, write or compute the value of a private field. An interface
cannot define an instance field but a class or struct can have instance fields.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">Instance fields are
actual variables that store a particular piece of information. Properties offer
another level of abstraction to expose the fields. This additional abstraction
layer in properties enables the developers to apply access modifiers separately
for getters and setters.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">&nbsp;</span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">The properties do
not have storage locations.&nbsp;The properties have accessors that
contain the executable statements to read the values and to set the values. The
accessor declarations can contain a get accessor and a set accessor. Also, you
cannot apply any validation logic on instance fields but you can do that on
property.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">For auto-properties
that you use, the compiler will generate backing fields and associated methods
to access the fields for you.&nbsp;By using property, you can restrict the
external user to either set the value(only set accessor) or read (only get
accessor) the value or both (both get and set accessor).<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;">A field is a
variable of any type that is declared directly in a class or struct. Fields are
members of their containing type. A class or struct may have instance fields,
static fields, or both. Instance fields are specific to an instance of a type
while a static field belongs to the type itself, and is shared among all
instances of that type.<o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">Please watch the
instance field vs property video </span><a href="https://youtu.be/3YfiJc3mSRM%20"><span lang="EN-US">here</span></a><span lang="EN-US"> for more details.<o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span lang="EN-US" style="font-weight: normal;"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--><o:p></o:p></span></p>

<p class="MsoBodyText"><span style="font-weight: normal;"><span lang="EN-US">To Be Continued
Part-13...</span><span lang="EN-US"><o:p></o:p></span></span></p>

<p class="MsoBodyText"><span lang="EN-US"><span style="font-weight: normal;"><br></span>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></span><span lang="EN-US"><o:p></o:p></span></p><a name="outer-wrapper"></a></h3>
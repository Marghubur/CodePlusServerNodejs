<div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q021. What is the Fragile Base Class Problem (FBCP) of OOPS? How can you avoid this problem?&nbsp;</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">A fragile base class is the most common problem with inheritance in OOPS. The fragile base class problem is a fundamental architectural problem of object-oriented programming systems where base classes are considered "fragile" because seemingly safe modifications to a base class, when inherited by the derived classes, may cause the derived classes to malfunction. So a base class is called fragile when changes made to it break a derived class.</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The Fragile Base Class Problem can be avoided by avoiding inheritance and using composition. For preventing inheritance we must have to make the class sealed. Please read more about the sealed class and the sealed method&nbsp;<a href="https://www.techpointfunda.com/2020/10/sealed-class-sealed-methods-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here</a>.<br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q022. What is an abstract class? Can an abstract class implement an interface?</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">A class declared with the "abstract" modifier is known as an abstract class. The abstract modifier indicates that the type being modified has a missing or incomplete implementation.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The purpose of an abstract class is to provide a skeletal structure or blueprint for other classes to derive from along with the common reusable methods, properties, events, or indexers.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">An abstract class may or may not have any abstract method but if a class has an abstract member, then the class must be abstract otherwise the compiler generates a compile-time error.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">An abstract class can never be instantiated. It can only be used as a base class, and the inheriting class must have to implement the abstract members of the base class unless the inheriting class is also an abstract class.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">An abstract class can also implement interfaces. Not even this but, abstract classes can also inherit from other abstract classes or concrete classes.&nbsp;</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">Please read the complete Abstract Class vs Interface article&nbsp;<a href="https://www.techpointfunda.com/2020/09/abstract-class-vs-interface-csharp8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here&nbsp;</a>for more details. Please watch the Abstract Class vs Interface video&nbsp;<a href="https://youtu.be/hVlTLTRSRfo" rel="nofollow" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here</a>&nbsp;as well.</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q023. When do you choose interface over an abstract class or vice versa?</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">In C# to achieve abstraction and security, we use abstract classes. Normally we use the abstract classes when we create frameworks for the project. If you see the .Net frameworks you can find a lot of abstract classes.&nbsp;</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Normally we must have to declare the class as abstract if:</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ul style="outline: 0px; transition: all 0.3s ease 0s; margin: 0.5em 0px; padding: 0px 2.5em; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">The class contains any abstract members.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">The class does not provide implementation to any of the methods of the inherited interface.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">The class does not provide the implementation of the base class abstract methods.</li></ul></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">On the other hand, interfaces are used when we are defining some contract or blueprint for the external users. And there is a chance that a user may implement multiple interfaces based on the requirement because multiple interface inheritance is possible.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q024. Can you define constructors in the abstract class? What is the use of a constructor in an abstract class that can not be instantiated?</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Yes, an abstract class can also have constructors.&nbsp; An abstract class only works as a base class in C# but still, it can define constructors. Please read about the constructors&nbsp;<a href="https://www.techpointfunda.com/2020/12/constructors-in-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here</a>.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">An abstract class can not be instantiated but we know that an abstract class can also have concrete members which require some default values as an input parameter.&nbsp;</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">So it will be the responsibility of the inheriting class to provide the values for the base abstract class's constructor.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q025. Can you create the object of the abstract class? Is it mandatory to have abstract members in the abstract class?</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">No, we cannot create the object of an abstract class.&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">An abstract class only works as a base class.</span></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">It is not mandatory to have abstract members in the abstract class. But there is no means of an abstract class without any abstract member, we can use a concrete class instead.&nbsp;</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">But if a class has an abstract member, then the class must be abstract otherwise the compiler generates a compile-time error.&nbsp;Please read the complete abstract class article&nbsp;<a href="https://www.techpointfunda.com/2020/10/abstract-class-abstract-method-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here&nbsp;</a>for more details.</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q026. What is the difference between abstract class and interface?</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">This is one of the favorite questions of the interviewer. On the other hand, the answer to this question is more confusing as well after the introduction of C#8.&nbsp;</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><ol style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">For the real abstract class, it is necessary to have at least one abstract member while an interface may not.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An abstract class cannot have multiple class inheritance, but an interface can have multiple interface inheritance.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An abstract class can have a&nbsp;<a href="https://www.techpointfunda.com/2020/12/constructors-in-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">constructor</a>&nbsp;or&nbsp;<a href="https://www.techpointfunda.com/2021/01/destructor-and-finalizer-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">destructor</a>&nbsp;while an interface cannot.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An&nbsp;<a href="https://www.techpointfunda.com/2020/10/abstract-class-abstract-method-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">abstract class</a>&nbsp;can contain instance fields and constants, but the interface cannot.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An abstract keyword is used to declare an abstract class while an interface keyword is used to define an interface.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An abstract class cannot be inherited by&nbsp;<a href="https://www.techpointfunda.com/2021/01/Structure-Or-Struct-CSharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">structures</a>&nbsp;while an interface can be inherited by structures.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An abstract class can inherit from both class and interfaces while an interface can only be inherited from an interface.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The virtual interface members (concrete methods) are not inherited in the derived class but all the concrete members of an abstract class are inherited.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The inheriting class must have to&nbsp;<a href="https://www.techpointfunda.com/2020/11/virtual-method-and-method-override-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">override</a>&nbsp;all the abstract members of the base abstract class with an explicit override keyword, while&nbsp;<a href="https://www.techpointfunda.com/2020/09/virtual-interface-method-csharp-8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">interface virtual members</a>&nbsp;can only be overridden explicitly without the override keyword.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">You can override any abstract member of the abstract class as&nbsp;<a href="https://www.techpointfunda.com/2020/10/sealed-class-sealed-methods-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">sealed</a>&nbsp;in the inheriting class while you cannot in the case of the interface in C# 8.</li></ol><div style="font-size: medium;"><br></div><div style="font-size: medium;"><br></div><div style="font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q027. Does C# support multiple inheritances? Why?</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The answer to this question is both yes and no. C# does not support multiple class inheritance due to the diamond problem. But C# supports multiple interface inheritance.</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">But the question of the diamond problem came once again for multiple interface inheritance in&nbsp;<a href="https://www.techpointfunda.com/2020/09/interface-modifier-csharp-8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">C#8</a>&nbsp;as well because C# 8 supports&nbsp;<a href="https://www.techpointfunda.com/2020/08/interface-default-method-csharp-8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">default methods</a>. Well, the diamond problem is resolved in C# for multiple interface inheritance by the most specific override rule.</span></div></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q028. What is the Diamond Problem in OOPS?</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The diamond problem is an ambiguity that can arise because of allowing multiple inheritances. It is a big problem for languages that allow multiple inheritances of states like C++. Multiple inheritances are not allowed for classes in C#, however, it is allowed for interfaces in a limited way so that it does not contain any state (instance field).</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">C# does not support multiple class inheritance because it adds too much complexity to C#, one of them is the diamond problem. It will create ambiguity for CLR which one has to call if there is any method with the same name in more than one base class.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q029. What is the difference between class inheritance and interface inheritance in C#?</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">The main difference between class and interface inheritance is as follows:</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><ol style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A class cannot inherit from multiple classes, but a class can inherit from multiple interfaces.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A class can inherit from both class and interface at the same time but an interface can only inherit from other interfaces.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A derived class can override the base class method but the interface requires explicit override. Please read more&nbsp;<a href="https://www.techpointfunda.com/2020/09/multiple-interface-inheritance-csharp8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here</a>.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A class can have instance members for reuse in the derived class but an interface cannot define any instance member.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">In C#8, an interface can also have reusable default methods. A base class can have constructors, so the derived class can pass the required parameter for the base class, but we can not pass that for interface inheritance because they do not have a constructor.</span></li></ol><div style=""><font size="3"><br></font></div><div style=""><font size="3"><br></font></div><div style=""><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q030. What is the difference between multiple and multilevel inheritances?</span></div></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">In multiple inheritances, there are multiple base classes or interfaces of the derived classes. For example Interface A -&gt; Class AB &lt;- Interface B.&nbsp;</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Multiple class inheritance is not allowed in C#, but multiple interface inheritance is allowed. Please read more about the multiple inheritances&nbsp;<a href="https://www.techpointfunda.com/2020/09/multiple-interface-inheritance-csharp8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">here</a>.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">On the other hand in multilevel inheritance, there is a chain of inheritance. For example Class A -&gt; Class B -&gt; Class C.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">So in the Multilevel inheritance, a derived class will inherit a base class and the derived class also act as the base class to other class. Multilevel inheritance is allowed in interfaces as well.</div></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px; text-align: right;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s; color: red; font-size: x-large;">To Be Continued Part-04...</b></span></div></div></div></span></div></div></span></div></span></div></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div></span></div></div></span></div></div></span></div></span></div></div></div></span></div></span></div>
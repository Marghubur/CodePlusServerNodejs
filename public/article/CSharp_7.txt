<div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q061. What is the difference between boxing and unboxing in C#?</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The concept of boxing and unboxing underlies the C# unified view of the type system in which a value of any type can be treated as an object. Both boxing and unboxing degrade the performance, so they must be always avoided.</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Boxing:&nbsp;</b></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Boxing is the process of converting a value type to the type object or to any interface type implemented by this value type.&nbsp;</span></span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">When the common language runtime (CLR) boxes a value type, it wraps the value inside a&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">System.Object</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">&nbsp;instance and stores it on the managed heap.</span></span></span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Boxing a value type allocates an object instance on the heap and copies the value into the new object.</span></span></li></ol></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-family: Roboto, sans-serif; background-color: rgb(255, 255, 255);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">int number = 100;</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">object obj = number;</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">studentStruct structureObj = new studentStruct(1, 'Alex', 'alex@gmail.com');</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">IStudent _iStudent = structureObj;</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br></span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;">UnBoxing:</b></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Unboxing is an explicit conversion from the type object to a value type or from an interface type to a value type that implements the interface.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Boxing is implicit but unboxing is explicit. So you have to do the required casting for unboxing. Unboxing extracts the value type from the object.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An unboxing operation consists of two steps:</li></ol></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><ul style="outline: 0px; transition: all 0.3s ease 0s; margin: 0.5em 0px; padding: 0px 2.5em; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">Checking the object instance to make sure that it is a boxed value of the given value type.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;">Copying the value from the instance into the value-type variable.</li></ul></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">int number = (int) obj;</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">studentStruct structureObj = (studentStruct) _iStudent;</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br></span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q062. What is the difference between boxing and conversion in C#?</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Both boxing and conversion are implicit conversions. The compiler does it internally.</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">The main difference between boxing and conversion is that, in boxing, only a value type is converted into an&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">Object&nbsp;</span><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);">type implicitly. While in conversion a smaller value type is converted into a larger value type implicitly.&nbsp;</span></span></div><div style="font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br></span></span></div><div style=""><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q063. What is the difference between unboxing and casting?</span></div></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Both unboxing and casting are explicit conversions. The compiler cannot do it internally. So they require an explicit cast operation.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The main difference between unboxing and casting is that, in unboxing, only a reference type (object type) object is converted into a value type explicitly. While in casting a larger value type is converted into a smaller value type explicitly.&nbsp;</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q064. What is the difference between int.Parse(),&nbsp; int.TryParse() and Convert.ToInt32() methods?</span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">In C# it is not possible to convert a string represented numbers into numeric types using conversion directly. String to integer conversion is a type conversion where an entity of string data type is changed into integer one.</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">So there are three inbuilt methods to do that. All the three methods int.Parse(), int.TryParse() and Convert.ToInt32() is used to convert a string representation of a number to an integer.&nbsp;</div></span></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Both int.Parse() and Convert.ToInt32() method throws an exception if the passed string is not a valid number whereas int.TryParse does not throw an exception if parsing fails.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;">int.Parse():&nbsp;</b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The int.Parse() method returns the converted int value only if it can be converted successfully.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The int.Parse() method will throw an exception if the passed string value cannot be converted into an integer safely.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The int.Prase() method can throw three different types of exceptions depending on the data passed:</li></ol><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ul style="outline: 0px; transition: all 0.3s ease 0s; margin: 0.5em 0px; padding: 0px 2.5em; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;"><b style="outline: 0px; transition: all 0.3s ease 0s;">ArgumentNullException:&nbsp;</b>If the parameter value is null, then it will throw an ArgumentNullException.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;"><b style="outline: 0px; transition: all 0.3s ease 0s;">FormatException:&nbsp;</b>&nbsp;If the parameter value is other than integer value or not in the proper format, it will throw FormatException.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;"><b style="outline: 0px; transition: all 0.3s ease 0s;">OverflowException:</b>&nbsp;If the parameter value is out of integer ranges, then it will throw&nbsp; OverflowException.</li></ul></div></div></div></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;">Example:</b></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;">int.Parse():&nbsp;</b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The int.Parse() method returns the converted int value only if it can be converted successfully.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The int.Parse() method will throw an exception if the passed string value cannot be converted into an integer safely.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The int.Prase() method can throw three different types of exceptions depending on the data passed:</li></ol><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ul style="outline: 0px; transition: all 0.3s ease 0s; margin: 0.5em 0px; padding: 0px 2.5em; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;"><b style="outline: 0px; transition: all 0.3s ease 0s;">ArgumentNullException:&nbsp;</b>If the parameter value is null, then it will throw an ArgumentNullException.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;"><b style="outline: 0px; transition: all 0.3s ease 0s;">FormatException:&nbsp;</b>&nbsp;If the parameter value is other than integer value or not in the proper format, it will throw FormatException.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;"><b style="outline: 0px; transition: all 0.3s ease 0s;">OverflowException:</b>&nbsp;If the parameter value is out of integer ranges, then it will throw&nbsp; OverflowException.</li></ul></div></div></div></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;">Example:</b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">int result;</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">string strNum = "120";</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">result = int.Parse(strNum);</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">If you see the library code of int.Parse() method:</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div class="separator" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEgwnl5stmYtc_qKyRzFLS2EPDavgSfN_Mkrme2ujndJXpJKq3zIqov8BHXVjEOuP5uU7BIGM6rU9wPzl1KooFl7uGu_Xv88XOKDXrWLJ5EMcj8mjaNMv5k4NA4cGWNUsxW2KZxOd3p5q4YJOLvX-JLuaYAI2nN1RnIO7QNi16tGseTaVRraOKYjaaxP=s1177" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);"><img alt="int-parse" border="0" data-original-height="317" data-original-width="1177" height="172" src="https://blogger.googleusercontent.com/img/a/AVvXsEgwnl5stmYtc_qKyRzFLS2EPDavgSfN_Mkrme2ujndJXpJKq3zIqov8BHXVjEOuP5uU7BIGM6rU9wPzl1KooFl7uGu_Xv88XOKDXrWLJ5EMcj8mjaNMv5k4NA4cGWNUsxW2KZxOd3p5q4YJOLvX-JLuaYAI2nN1RnIO7QNi16tGseTaVRraOKYjaaxP=w640-h172" title="int-parse" width="640" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px auto; padding: 10px 0px; max-width: 100%; vertical-align: middle; border: none; position: relative;"></a></div></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></b></span></div><br style="outline: 0px; transition: all 0.3s ease 0s; font-size: 14px;"><ins class="adsbygoogle" data-ad-client="ca-pub-1671546370452156" data-ad-format="fluid" data-ad-layout="in-article" data-ad-slot="9782794864" data-adsbygoogle-status="done" data-ad-status="filled" style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; display: block; text-align: center; height: 147px;"><div id="aswift_13_host" tabindex="0" title="Advertisement" aria-label="Advertisement" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; border: none; height: 147px; width: 758px; position: relative; visibility: visible; background-color: transparent; display: inline-block; overflow: hidden;"><iframe id="aswift_13" name="aswift_13" browsingtopics="true" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="758" height="147" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allow="attribution-reporting" src="https://googleads.g.doubleclick.net/pagead/ads?gdpr=0&amp;us_privacy=1---&amp;client=ca-pub-1671546370452156&amp;output=html&amp;h=190&amp;slotname=9782794864&amp;adk=874982568&amp;adf=1920592740&amp;pi=t.ma~as.9782794864&amp;w=758&amp;fwrn=4&amp;lmt=1696608862&amp;rafmt=11&amp;format=758x190&amp;url=https%3A%2F%2Fwww.techpointfunda.com%2F2022%2F02%2Fcsharp-interview-questions-part07.html&amp;host=ca-host-pub-1556223355139109&amp;wgl=1&amp;uach=WyJXaW5kb3dzIiwiMTAuMC4wIiwieDg2IiwiIiwiMTE3LjAuNTkzOC4xNDkiLFtdLDAsbnVsbCwiNjQiLFtbIkdvb2dsZSBDaHJvbWUiLCIxMTcuMC41OTM4LjE0OSJdLFsiTm90O0E9QnJhbmQiLCI4LjAuMC4wIl0sWyJDaHJvbWl1bSIsIjExNy4wLjU5MzguMTQ5Il1dLDBd&amp;dt=1696611973074&amp;bpp=3&amp;bdt=18090&amp;idt=10622&amp;shv=r20231004&amp;mjsv=m202310020101&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;cookie=ID%3Dc4ece6fcdd8ebb71-22a3198661e40055%3AT%3D1696610870%3ART%3D1696611961%3AS%3DALNI_MZUWNGQd3UlWKDSV37qFLwtkT56sg&amp;gpic=UID%3D00000c594b2a505c%3AT%3D1696610870%3ART%3D1696611965%3AS%3DALNI_Maa5ZjoU4aGSUtq6xuGSgHNf6Sq3Q&amp;prev_fmts=0x0%2C1200x280%2C800x201%2C758x192%2C758x190%2C1005x124%2C758x190%2C758x190%2C758x190%2C758x190%2C758x190%2C758x190%2C758x190%2C758x190&amp;nras=2&amp;correlator=808810201772&amp;frm=20&amp;pv=1&amp;ga_vid=72469743.1696176416&amp;ga_sid=1696611975&amp;ga_hid=998888101&amp;ga_fc=1&amp;ga_cid=1795393350.1696610763&amp;rplot=4&amp;u_tz=330&amp;u_his=1&amp;u_h=864&amp;u_w=1536&amp;u_ah=834&amp;u_aw=1536&amp;u_cd=24&amp;u_sd=1.25&amp;dmc=8&amp;adx=206&amp;ady=8391&amp;biw=1519&amp;bih=726&amp;scr_x=0&amp;scr_y=5506&amp;eid=44759875%2C44759926%2C31078020%2C44795921%2C44804782%2C44804940%2C31067146%2C31067147%2C31067148%2C31068556&amp;oid=2&amp;psts=AOrYGsm8MOfBKsQ3F-5pK3pB3EYp0ZjdS7Mw5nl3SIRot6cFmdEwvvhHrdnpzpsGEREu98Mk7WgFhiGzZLeUakC7g6WI0A%2CAOrYGsmcMpau41g0EpAW9VU1RQfrs3AO-QoiwWGm6YO2ib7xH0Q_9Jpmyh-OC7l9hdyrx13LyR_Jon7i7QpBzYg5lnf9a_oqFOW47RubnKPaPAOXqzY%2CAOrYGslotwJCaCTqyVC2Nww8B0sd4NgSifQPh7wqlx8nupE9mrBlCs9gWk_9XS-Ud3XGD3pso9Oz7Rv209rX1r445tXSDd8P%2CAOrYGslMjyrMFt9X_dcKqW4G9C2m48c2P3oBzFrYwBHFOlSd7cXCx4VLBTKycNiTpu9j2B2IfDx_BEg5r-or0q7EyPzpIZMV%2CAOrYGsmHb_9KFIUzASAkOsWFHCRwEeK5Xnvh5qCLpri04CsQTYwjCG_RDanRfdaHJzOdc0NMLSoJ-3-afEdKHOqzXbdysA%2CAOrYGsmbQ60MIKthBFDd19bvkuyzNeMZ8YidQVTrujDndXzJZauVACoCJ_yNVgtVhmiIbHWNngcpqaQ65XYj3jzvNfcEsA%2CAOrYGsnG8e1KjeQiIT42xQUoAfwSXcgSYC3GsW4toS0KEiPp8L7FWmqIxjJZ_kPCqzi_kkoELef4_AbBi_2-vMpvq78Pcw%2CAOrYGsmFNq921aVBFOLSTpnD__K0Z5_hQTL_-FC-zZlgIBaSg1nHRY5yMcTh0ex6gzKK7imVM0MDUBtZXUVU6k4V2d8wAQ%2CAOrYGskFI9BvRDYET8jIpfxoTiKqTtfADX1nWVhV_tThe4lR_DRmbVxP6Kx-Flzh1XAqCffuAvQpF8z_Xl47iPv5AESVRQ%2CAOrYGskvDt4I_TQNy8PAvQKfPL_8_BB8awNx8Y7aXXkCVijM1KG2wG_4F36wKVYl5Aw-KgDa50ohzCqRw9LTtbqEN1cyeA%2CAOrYGsnnYIIFIu3dgL68nemy7Vu7PKGKTr5GcPX4MtV1JkZ3UUy5mPQuPTqWs_4Hkl9stn6BNqi_toBcs21M8r68RgsnDw%2CAOrYGslhrBxkLyM2GfUHlJ_7SHpj2MJoEAFFuPpgLhcTczOAHON5wRWMSul_GOHs8fx0XCqyMwZZ_m1OpjdJsSp5etreUQ&amp;pvsid=3120459160388110&amp;tmod=1582156507&amp;uas=3&amp;nvt=2&amp;ref=https%3A%2F%2Fwww.techpointfunda.com%2Fp%2Fall-available-articles.html&amp;fc=1920&amp;brdim=0%2C0%2C0%2C0%2C1536%2C0%2C1536%2C834%2C1536%2C726&amp;vis=1&amp;rsz=%7C%7CpoEebr%7C&amp;abl=CS&amp;pfx=0&amp;fu=128&amp;bc=31&amp;td=1&amp;nt=1&amp;ifi=14&amp;uci=a!e&amp;btvi=12&amp;fsb=1&amp;xpc=JVhIj40Q3n&amp;p=https%3A//www.techpointfunda.com&amp;dtd=M" data-google-container-id="a!e" data-google-query-id="CPPHk5314YEDFdaUrAIdy7kL-Q" data-load-complete="true" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; max-width: 100%; left: 0px; position: absolute; top: 0px; border-width: 0px; border-style: initial; width: 758px; height: 147px;"></iframe></div></ins><br style="outline: 0px; transition: all 0.3s ease 0s; font-size: 14px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">int.TryParse():</b></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></b></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The int.TryParse() method returns a boolean value and accepts an out parameter which returns the converted integer value if the conversion is successful.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">If the string cannot be converted into int type, then the int.TryParse method returns false and zero is returned from the out parameter. But it will never throw an exception like the int.Parse() method.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The TryParse method is like the Parse method, except the TryParse method does not throw an exception if the conversion fails.</span></li></ol></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;">Example:</b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">int result;</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">string strNum = "120";</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">bool isSuccess = int.Parse(strNum, out result);</span></div></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">If you see the library code of int.TryParse() method:</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><img src="https://blogger.googleusercontent.com/img/a/AVvXsEgwnl5stmYtc_qKyRzFLS2EPDavgSfN_Mkrme2ujndJXpJKq3zIqov8BHXVjEOuP5uU7BIGM6rU9wPzl1KooFl7uGu_Xv88XOKDXrWLJ5EMcj8mjaNMv5k4NA4cGWNUsxW2KZxOd3p5q4YJOLvX-JLuaYAI2nN1RnIO7QNi16tGseTaVRraOKYjaaxP=s1177"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">int.TryParse():</b></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></b></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The int.TryParse() method returns a boolean value and accepts an out parameter which returns the converted integer value if the conversion is successful.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">If the string cannot be converted into int type, then the int.TryParse method returns false and zero is returned from the out parameter. But it will never throw an exception like the int.Parse() method.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The TryParse method is like the Parse method, except the TryParse method does not throw an exception if the conversion fails.</span></li></ol></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><b style="outline: 0px; transition: all 0.3s ease 0s;">Example:</b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">int result;</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">string strNum = "120";</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">bool isSuccess = int.Parse(strNum, out result);</span></div></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">If you see the library code of int.TryParse() method:</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><img src="https://blogger.googleusercontent.com/img/a/AVvXsEjKrAyRdN_e-IV1HUjnCd0e2MWfOx01D0EWyoBsbBQES-6eCaj5rne2cSpWrvvOTqi4L4hgERqbiFLog-_V72zEqHfJIjhu_kf-Nchs7Ymlny8mdDYQKwNcdKr4Z-gi7AO2d5p3p7ld3ZDdBSi9cchf4dRe6T_0EvhKCuQ8hhl1m9U5Uhn7cclJGvXV=s1217"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Convert.ToInt32():</b></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">It also converts a specified string representation of a number to an equivalent 32-bit signed integer. There are multiple convert methods in C#.&nbsp;</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">If the passed value is null, it will not throw any exception like int.Parse() method but it return 0.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">There are different overloaded versions in the Convert class for numeric conversion.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The Convert.ToInt32() method&nbsp; also throws two different types of exceptions depending on the data passed:</li></ol></div></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><ul style="outline: 0px; transition: all 0.3s ease 0s; margin: 0.5em 0px; padding: 0px 2.5em; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">FormatException:&nbsp;</b>&nbsp;If the parameter value is other than integer value or not in the proper format, it will throw FormatException.</span></li></ul></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><ul style="outline: 0px; transition: all 0.3s ease 0s; margin: 0.5em 0px; padding: 0px 2.5em; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style: none; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s;">OverflowException:</b>&nbsp;If the parameter value is out of integer ranges, then it will throw&nbsp; OverflowException.</span></li></ul></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Example:</b></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: large;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">int result;</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: large;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">string strNum = "120";</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: large;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);">result = Convert.ToInt32(strNum);</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;">If you see the library code for Convert.ToInt32() method:</div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><img src="https://blogger.googleusercontent.com/img/a/AVvXsEjYjhPuYATfHFO7Z_eE73oTHxjKNvaNoVBPvW1IKyaRlgjhW_2qiCjefDB5pNybn67mH-We2Q_0hu0vDs3iyB_bm4CZ35xq2Gimb2KhdbK2texDrZA0xUeklyL67rIzemisTIKTP1XfqVhWuDjD8uirosdG9Imm4z0ZLc4Rn2uNXXUswwoPnWtdMRRh=s1146"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><br></div></div></span></div></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q065. What is the difference between .ToString() and Convert.ToString() in C#?</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: large;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">Both .ToString() and&nbsp; Convert.ToString() methods are used to convert an object into a string but the main difference between them is the Convert.ToString function checks and handles null values while ToString() does not.&nbsp;</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">The ToString() method will throw a NULL reference exception if the object being converted into the string is null. On the other hand the Convert.ToString() method returns an empty string if the object is null but does not throw an exception.&nbsp;</span></span></div></div></div><div style="font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">However we can check and prevent the run time NULL Reference exception in .ToString() as well by using null-coalescing operator (??) or IsNullOrEmpty() method.</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">The Convert.ToString() is a static method that is defined in the static Convert class under the System namespace. On the other hand, In C# the ToString() is a&nbsp; virtual method defined in the&nbsp; Object class in the System namespace.&nbsp;</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;">So ToString() method can be overridden based on requirement but Convert.ToString() method cannot be overridden. If you see the ToString() method:</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(11, 83, 148);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">&nbsp;public virtual String ToString()</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">&nbsp;{</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">&nbsp; &nbsp; &nbsp;return GetType().ToString();</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">&nbsp;}</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Object.ToString is the major formatting method in the .NET Framework. It converts an object to its string representation so that it is suitable for display. Default implementations of the Object.ToString method returns the fully qualified name of the object's type.</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">The ToString() method has only one overloaded version which takes the IFormatProvider type. While Convert.ToString() has 36 overloaded versions which take different types of parameters. You can also pass your user-defined formatters also in Convert.ToString() method.</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Convert.ToString tries to use IFormattable and IConvertible interfaces before calling base Object.ToString. The IConvertible takes precedence over IFormattable, which in turn takes precedence over Object.ToString() implementation.&nbsp;</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">There are multiple overloaded versions for ToString() method. Please visit this&nbsp;<a href="https://referencesource.microsoft.com/#q=Convert.ToString" rel="nofollow" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">link&nbsp;</a>to see all the methods of the Convert class for more details.</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><img src="https://blogger.googleusercontent.com/img/a/AVvXsEhXyjnkvT_vZgQ9xyGXrx6dLvLtQk_st4ZgoBzUrAro6rSLSTtpVzsrplsmPaA5iN82MVx8Kl-C-SqgtjvZI1AABOlWBGtQTXCku1_xHk6Wij-URE0Y4a8yMCkieltIzJqXShLyCb2j_pBVBMLfzDexUzxcnSYzhJb_4rcHzhqrbVFM4qRng30e1Dxn=s1167"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q066. What is the difference between String.IsNullOrEmpty() and String.IsNullOrWhiteSpace() in C#?</span></div><div style="font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Both the String.IsNullOrEmpty() and String.IsNullOrWhiteSpace() are static methods which are defined in the String sealed class.</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">The main difference between them is that String.IsNullOrEmpty() checks whether a string is null or an empty string while String.IsNullOrWhiteSpace() checks if a string is null, empty, or an arbitrary number of spaces in the string (white space, tab, etc).&nbsp;</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">So String.IsNullOrWhiteSpace() method covers String.IsNullOrEmpty() logic internally apart from checking the white space. Therefore in case of white space " ", tab space "\t", new line "\n" the String.IsNullOrWhiteSpace() returns true while String.IsNullOrEmpty() returns false.</span></div><div style="font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style=""><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">If you see the library code for both methods:</span></div></div><div style="font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><img src="https://blogger.googleusercontent.com/img/a/AVvXsEgfn8rumGUxOtZHJ0hZMoOp19htvNyZQIaDOStrmwZt-jakd8bGC-MexfkFdffznxfcbJZGCSvQSNtQgYS8lzSDrQXQ0Uv2kUso2PtwpCb4hrs5f5ZHy5ZJ8HuiL9fL_mAsNGxNHTRKnGGwaKEq9cudzuspkCPrw49boYaE59SEBLDF2r9HEAZ8KUEv=s767"><br></div><div style="font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q067. What is a sealed class in C#? Can you make the abstract class sealed?</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">In C# sealed keyword applies restrictions on the class, method, property, indexer, or event. If you create a sealed class, it cannot be extended.&nbsp; In C#, we can use a sealed keyword before or after the access modifier to define the class as sealed classes.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">A sealed class is used to define the inheritance depth level of a class. We can restrict a class from inheritance for security reasons in C# by declaring it a sealed class. In VB.Net "NotInheritable" keyword serves the purpose of sealing. In Java "final" keyword serves the same purpose.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">A class modified by the "sealed" keyword is known as a sealed class. A sealed class is completely opposite to an abstract class since sealed classes prevent inheritance, and an abstract class is only used for extending.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">Sealed classes restrict the users from inheriting the class. The sealed keyword tells the compiler that the class cannot be extended. Normally a sealed class is always the last level class in the inheritance hierarchy, but a stand-alone class can also be marked as sealed. A sealed class can also define constructors.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Fundamental Points of Sealed Class:</b></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A sealed class cannot be inherited but can be instantiated.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The sealed classes can be a derived class but cannot be a base class.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A sealed class cannot define any&nbsp;<a href="https://www.techpointfunda.com/2020/11/virtual-method-and-method-override-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">virtual&nbsp;</a>member.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A sealed class cannot be&nbsp;<a href="https://www.techpointfunda.com/2020/10/abstract-class-abstract-method-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">abstract&nbsp;</a>or&nbsp;<a href="https://www.techpointfunda.com/2020/09/static-class-constructor-method-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">static</a>.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Sealed classes cannot contain any abstract methods.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A sealed class can define the&nbsp;<a href="https://www.techpointfunda.com/2020/12/constructors-in-csharp.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">constructors&nbsp;</a>but a constructor cannot be marked as sealed.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The sealed keyword can be used either after or before the access modifier of the class.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">&nbsp;A field variable cannot be marked as sealed.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Unlike a sealed method, a non-child class can also be defined as sealed.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An interface cannot be defined as sealed.</li></ol><div style="font-size: medium;"><br></div><div style="font-size: medium;"><br></div><div style="font-size: medium;"><br></div><div style=""><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q068. What is the sealed method in C#? How can you make any method sealed?</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">A sealed method is used to define the overriding level of a virtual method in the inheritance. A method modified by the "sealed" keyword is known as a sealed method. A sealed keyword is used for a method to prevent it from being overridden in the derived class, i.e. to prevent the runtime polymorphic feature of OOPs.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">The sealed methods in C# cannot be overridden further, but they must be used with an override keyword in the method. If you want to declare a method as sealed, then it has to be declared as virtual in its base class because a non-virtual method cannot be overridden.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">A sealed method enables you to allow classes to derive from your class but prevent your specific methods from overriding by the derived class. A property can also be sealed, but you can only seal the property not the underlying setter and getter since C# offers no override syntax for setters or getters.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;">An interface itself cannot be declared as sealed but, it can have both virtual and sealed methods in&nbsp;<a href="https://www.techpointfunda.com/2020/09/interface-modifier-csharp-8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">C# 8</a>. Please read more about the sealed interface method here.</div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><b style="outline: 0px; transition: all 0.3s ease 0s;">Fundamental Points of Sealed Method:</b></div><div style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="font-size: medium; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A sealed method can be only be defined in a derived or child class.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">The sealed keyword is always used with the override keyword.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">Only virtual methods of the base class can be overridden as sealed.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">An abstract method can also be overridden as sealed in the derived class since an abstract method is virtual implicitly.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A field variable cannot be marked as sealed, because it cannot be overridden.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">You can specify the sealed modifier before the access modifier, before or after the override keyword.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">In&nbsp;<a href="https://www.techpointfunda.com/2020/09/interface-modifier-csharp-8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">C# 8</a>, an interface can also define a sealed method without inheriting any base interface.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">A&nbsp;<a href="https://www.techpointfunda.com/2020/09/virtual-interface-method-csharp-8.html" target="_blank" style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 136, 255);">virtual interface method</a>&nbsp;cannot be overridden as sealed in the derived interface.</li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;">You can only prevent a sealed method from being overridden in the derived class, but it cannot prevent a sealed method from redefining it as virtual again.</li></ol><div style="font-size: medium;"><br></div><div style="font-size: medium;"><br></div><div style=""><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q069. What is the difference between the sealed method and the private method in C#?</span></div><div style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46);"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68);"><ol style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A private method is not inherited whereas a sealed method is inherited but cannot be overridden.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A private method cannot be accessed from derived classes while a sealed method can be accessed from derived classes.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">Only a virtual member can be sealed in the derived class, but there is no such condition for making a method private.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">A sealed method can only be declared in a child class while a private method can be defined in any class.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">The same private method can be defined in the derived class and it does not lead to an error or warning.</span></li></ol><div style=""><font size="3"><br></font></div><div style=""><font size="3"><br></font></div><div style=""><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(204, 0, 0); font-size: large;">Q070. What is the difference between Sealed Class and Abstract Class in C#?</span></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: large;"><br style="outline: 0px; transition: all 0.3s ease 0s;"></div><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><ol style="font-size: 14px; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px 0px 0px 15px; line-height: 1.5;"><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">An abstract class can only be used as a base class, while a sealed class cannot be used as a base class.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">An abstract class contains abstract methods but a sealed class cannot contain any abstract method.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">An abstract class contains virtual methods but a sealed class cannot contain any virtual method.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">An abstract class cannot be instantiated, but a sealed class can be instantiated.</span></li><li style="outline: 0px; transition: all 0.3s ease 0s; margin: 5px 0px; padding: 0px; list-style-type: decimal; line-height: 1.5;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;">An abstract class cannot be the bottom-most level in the inheritance hierarchy but a sealed class may be the bottom-most.</span></li></ol><div style=""><font size="3"><br></font></div><div style=""><font size="3"><br></font></div><div style=""><div style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(46, 46, 46); font-size: 14px; text-align: right;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-size: medium;"><b style="outline: 0px; transition: all 0.3s ease 0s; color: red; font-size: x-large;">To Be Continued Part-08...</b></span></div></div></div></div></div></div></div></div></div></div></span></div></div></div></div></span></div></div><div style="font-size: large; outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px;"><br></div></span></div><div style="font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div><div style="font-size: medium;"><span style="outline: 0px; transition: all 0.3s ease 0s; margin: 0px; padding: 0px; font-size: medium;"><br></span></div></div></span></div></div></span></div></span></div></span></div></span></div></div></span></div></div></span></div></div></span></div></span></span></div></span></div></span></div></div></div></span></div></span></div>